package fracCalc; import java.util.Scanner; public class FracCalc { public static void main(String[] args) { Scanner console = new Scanner(System.in); do { System.out.println("Please enter the expression to be resolved:"); String input = console.nextLine(); if (input.equals("quit")) break; System.out.println(produceAnswer(input)); } while(true); } public static String produceAnswer(String input) { String[] terms = input.split(" "); String firstString = terms[0]; String operator = terms[1]; String secondString = terms[2]; boolean multiOp = false; if (terms.length > 3) multiOp = true; int[] firstTerm = parse(firstString); int[] secondTerm = parse(secondString); if (firstTerm[2] == 0 || secondTerm[2] == 0) return "Umm... why are you trying to divide by zero...?"; int[] result = {0, 0, 1}; int numer; int denom; switch (operator) { case "+": if (firstTerm[0] < 0) numer = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2]; else numer = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2]; if (secondTerm[0] < 0) numer += (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2]; else numer += (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2]; denom = firstTerm[2] * secondTerm[2]; result[1] = numer; result[2] = denom; break; case "-": if (firstTerm[0] < 0) numer = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2]; else numer = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2]; if (secondTerm[0] < 0) numer -= (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2]; else numer -= (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2]; denom = firstTerm[2] * secondTerm[2]; result[1] = numer; result[2] = denom; break; case "*": if (firstTerm[0] < 0) numer = firstTerm[0] * firstTerm[2] - firstTerm[1]; else numer = firstTerm[0] * firstTerm[2] + firstTerm[1]; if (secondTerm[0] < 0) numer *= secondTerm[0] * secondTerm[2] - secondTerm[1]; else numer *= secondTerm[0] * secondTerm[2] + secondTerm[1]; denom = firstTerm[2] * secondTerm[2]; result[1] = numer; result[2] = denom; break; case "/": if (firstTerm[0] < 0) numer = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2]; else numer = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2]; if (secondTerm[0] < 0) denom = (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2]; else denom = (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2]; result[1] = numer; result[2] = denom; break; default: return "Hey! That's an invalid format! Did you even pass elementary school math?!"; } reduce(result); String resultString = reformat(result); if (multiOp) { String temp = resultString; for(int i = 4; i < terms.length; i += 2) temp += " " + terms[i - 1] + " " + terms[i]; resultString = produceAnswer(temp); } return resultString; } public static int[] parse(String input) { int whole = 0; int numer = 0; int denom = 1; if (input.indexOf('_') >= 0) { whole = Integer.parseInt(input.substring(0, input.indexOf('_'))); numer = Integer.parseInt(input.substring(input.indexOf('_') + 1, input.indexOf('/'))); denom = Integer.parseInt(input.substring(input.indexOf('/') + 1)); } else if (input.indexOf('/') >= 0) { numer = Integer.parseInt(input.substring(0, input.indexOf('/'))); denom = Integer.parseInt(input.substring(input.indexOf('/') + 1)); } else whole = Integer.parseInt(input); int[] arr = {whole, numer, denom}; return arr; } public static void reduce(int[] arr) { if (arr[2] < 0) { arr[1] *= -1; arr[2] *= -1; } arr[0] = arr[1] / arr[2]; arr[1] %= arr[2]; int gcf = gcf(arr[1], arr[2]); arr[1] /= gcf; arr[2] /= gcf; if (arr[0] < 0 && arr[1] < 0) arr[1] *= -1; } public static String reformat(int[] arr) { String input = arr[0] + "_" + arr[1] + "/" + arr[2]; if (input.startsWith("0_")) input = input.substring(2); if (input.indexOf("_0/") > 0) input = input.substring(0, input.indexOf("_0/")); else if (input.indexOf("0/") == 0) input = "0"; if (input.endsWith("/1")) input = input.substring(0, input.length() - 2); return input; } public static int gcf(int num1, int num2) { int i; num1 = Math.abs(num1); num2 = Math.abs(num2); for(i = num2; !(isDivisibleBy(num2, i) && isDivisibleBy(num1, i)); i--) {} return i; } public static boolean isDivisibleBy(int dividend, int divisor) { if(divisor == 0) { throw new IllegalArgumentException(); } if(dividend % divisor == 0) { return true; } else { return false; } }}